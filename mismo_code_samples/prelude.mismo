extern def __zig_print(value: String)
extern def __zig_panic(value: String) Never

extern def __zig_eq(left Any, right Any) Bool
extern def __zig_neq(left Any, right Any) Bool
extern def __zig_lt(left Any, right Any) Bool
extern def __zig_gt(left Any, right Any) Bool
extern def __zig_lte(left Any, right Any) Bool
extern def __zig_gte(left Any, right Any) Bool

extern def __zig_add_uint(left Any, right Any) Nat
extern def __zig_sub_uint(left Any, right Any) Nat
extern def __zig_mul_uint(left Any, right Any) Nat
extern def __zig_div_uint(left Any, right Any) Nat

extern def __zig_neg_int(int Any) Int
extern def __zig_add_int(left Any, right Any) Int
extern def __zig_sub_int(left Any, right Any) Int
extern def __zig_mul_int(left Any, right Any) Int
extern def __zig_div_int(left Any, right Any) Int

extern def __zig_neg_float(float Any) Float
extern def __zig_add_float(left Any, right Any) Float
extern def __zig_sub_float(left Any, right Any) Float
extern def __zig_mul_float(left Any, right Any) Float
extern def __zig_div_float(left Any, right Any) Float

extern def __zig_nat2int(nat: Nat) Int
extern def __zig_nat2float(nat: Nat) Float
extern def __zig_nat2string(nat: Nat) String
extern def __zig_int2nat(int: Int) Nat
extern def __zig_int2float(int: Int) Float
extern def __zig_int2string(int: Int) String
extern def __zig_float2int(float: Float) Int
extern def __zig_float2string(float: Float) String
extern def __zig_string2int(string: String) Int
extern def __zig_string2float(string: String) Float

extern def __zig_alloc[T](size: Nat) Pointer[T]
extern def __zig_free[T](slice: Slice[T])
extern def __zig_slice_size[T](slice: Slice[T]) Nat
extern def __zig_slice2ptr[T](slice: Slice[T]) Pointer[T]
extern def __zig_ptr2slice[T](ptr: Pointer[T], size: Nat) Slice[T]

def bool(_ Nil) Bool: false

extend Bool
    def bool Bool: self
    def nat Nat: 
        nat(if self: 1
        else: 0)
    def int Int: 
        if self: 1
        else: 0
    def float Float: 
        if self: 1.0
        else: 0.0
    def string String: 
        if self: "true"
        else: "false"

    def ==(other Bool) Bool: .__zig_eq(other)
    def ==(other Nat) Bool: .__zig_eq(other)
    def ==(other Int) Bool: .__zig_eq(other)
    def !=(other Bool) Bool: .__zig_neq(other)
    def !=(other Nat) Bool: .__zig_neq(other)
    def !=(other Int) Bool: .__zig_neq(other)
    def <(other Bool) Bool: not self and other
    def <(other Nat) Bool: .nat.__zig_lt(other)
    def <(other Int) Bool: .int.__zig_lt(other)
    def <=(other Bool) Bool: not self or other
    def <=(other Nat) Bool: .nat.__zig_lte(other)
    def <=(other Int) Bool: .int.__zig_lte(other)
    def >(other Bool) Bool: self and not other
    def >(other Nat) Bool: .nat.__zig_gt(other)
    def >(other Int) Bool: .int.__zig_gt(other)
    def >=(other Bool) Bool: self or not other
    def >=(other Nat) Bool: .nat.__zig_gte(other)
    def >=(other Int) Bool: .int.__zig_gte(other)

    def +(other Bool) Nat:
        nat(if 
            self and other: 2
            self or other: 1
            else: 0 
        )
    def +(other Nat) Nat: .nat.__zig_add_uint(other)
    def +(other Int) Int: .int.__zig_add_int(other)

    def -(other Bool) Int:
        if 
            self and other: 0
            self: 1
            other: -1
            else: 0
    def -(other Nat) Int: .nat.__zig_sub_int(other)
    def -(other Int) Int: .int.__zig_sub_int(other)
    
    def -() Int:
        if self: -1
        else: 0

    def *(other Bool) Bool:
        if self and other: true
        else: false
    def *(other Nat) Nat: 
        if self: other
        else: nat(0)
    def *(other Int) Int: 
        if self: other
        else: 0
    def *(other Float) Float: 
        if self: other
        else: 0.0

    def /(other Bool) Bool:
        if 
            not other:
                panic("divide by zero")
            self and other: true
            else: false
    def /(other Nat) Nat: .nat.__zig_div_uint(other)
    def /(other Int) Int: .int.__zig_div_int(other)

extend Nat
    def bool Bool: .__zig_neq(0)
    def nat Nat: self
    def int Int: .__zig_nat2int
    def float Float: .__zig_nat2float
    def string String: .__zig_nat2string

    def ==(other Bool) Bool: .__zig_eq(other)
    def ==(other Nat) Bool: .__zig_eq(other)
    def ==(other Int) Bool: .__zig_eq(other)
    def !=(other Bool) Bool: .__zig_neq(other)
    def !=(other Nat) Bool: .__zig_neq(other)
    def !=(other Int) Bool: .__zig_neq(other)
    def <(other Bool) Bool: .__zig_lt(other.nat)
    def <(other Nat) Bool: .__zig_lt(other)
    def <(other Int) Bool: .int.__zig_lt(other)
    def <=(other Bool) Bool: .__zig_lte(other.nat)
    def <=(other Nat) Bool: .__zig_lte(other)
    def <=(other Int) Bool: .int.__zig_lte(other)
    def >(other Bool) Bool: .__zig_gt(other.nat)
    def >(other Nat) Bool: .__zig_gt(other)
    def >(other Int) Bool: .int.__zig_gt(other)
    def >=(other Bool) Bool: .__zig_gte(other.nat)
    def >=(other Nat) Bool: .__zig_gte(other)
    def >=(other Int) Bool: .int.__zig_gte(other)

    def -() Int: .__zig_nat2int.__zig_neg_int
    def +(other Bool) Nat: .__zig_add_uint(other.nat)
    def +(other Nat) Nat: .__zig_add_uint(other)
    def +(other Int) Int: .int.__zig_add_int(other)
    def -(other Bool) Nat: .__zig_sub_uint(other.nat)
    def -(other Nat) Nat: .__zig_sub_uint(other)
    def -(other Int) Int: .int.__zig_sub_int(other)
    def *(other Bool) Nat: if other: self else: nat(0)
    def *(other Nat) Nat: .__zig_mul_uint(other)
    def *(other Int) Int: .int.__zig_mul_int(other)
    def /(other Bool) Nat: .__zig_div_uint(other.nat)
    def /(other Nat) Nat: .__zig_div_uint(other)
    def /(other Int) Int: .int.__zig_div_int(other)
        

extend Int
    def bool Bool: self != 0
    def nat Nat: .__zig_int2nat
    def int Int: self
    def float Float: .__zig_int2float
    def string String: .__zig_int2string

    def ==(other Bool) Bool: .__zig_eq(other)
    def ==(other Nat) Bool: .__zig_eq(other)
    def ==(other Int) Bool: .__zig_eq(other)
    def !=(other Bool) Bool: .__zig_neq(other)
    def !=(other Nat) Bool: .__zig_neq(other)
    def !=(other Int) Bool: .__zig_neq(other)
    def <(other Bool) Bool: .__zig_lt(other.int)
    def <(other Nat) Bool: .__zig_lt(other.int)
    def <(other Int) Bool: .__zig_lt(other)
    def <=(other Bool) Bool: .__zig_lte(other.int)
    def <=(other Nat) Bool: .__zig_lte(other.int)
    def <=(other Int) Bool: .__zig_lte(other)
    def >(other Bool) Bool: .__zig_gt(other.int)
    def >(other Nat) Bool: .__zig_gt(other.int)
    def >(other Int) Bool: .__zig_gt(other)
    def >=(other Bool) Bool: .__zig_gte(other.int)
    def >=(other Nat) Bool: .__zig_gte(other.int)
    def >=(other Int) Bool: .__zig_gte(other)

    def -() Int: .__zig_neg_int
    def +(other Bool) Int: .__zig_add_int(other.int)
    def +(other Nat) Int: .__zig_add_int(other.int)
    def +(other Int) Int: .__zig_add_int(other)
    def -(other Bool) Int: .__zig_sub_int(other.int)
    def -(other Nat) Int: .__zig_sub_int(other.int)
    def -(other Int) Int: .__zig_sub_int(other)
    def *(other Bool) Int: .__zig_mul_int(other.int)
    def *(other Nat) Int: .__zig_mul_int(other.int)
    def *(other Int) Int: .__zig_mul_int(other)
    def /(other Bool) Int: .__zig_div_int(other.int)
    def /(other Nat) Int: .__zig_div_int(other.int)
    def /(other Int) Int: .__zig_div_int(other)

extend Float
    def int Int: .__zig_float2int
    def float Float: self
    def string String: .__zig_float2string

    def ==(other Float) Bool: .__zig_eq(other)
    def !=(other Float) Bool: .__zig_neq(other)
    def <(other Float) Bool: .__zig_lt(other)
    def <=(other Float) Bool: .__zig_lte(other)
    def >(other Float) Bool: .__zig_gt(other)
    def >=(other Float) Bool: .__zig_gte(other)

    def -() Float: .__zig_neg_float
    def +(other Float) Float: .__zig_add_float(other)
    def -(other Float) Float: .__zig_sub_float(other)
    def *(other Float) Float: .__zig_mul_float(other)
    def /(other Float) Float: .__zig_div_float(other)

"""
extend Pointer[T]
    -- static alloc Pointer[T]:
    --     __zig_alloc(1)

    -- static alloc(size: Nat) Pointer[T]:
    --     __zig_alloc(size)

    -- def free(size: Nat):
    --     __zig_free(self.slice(size))

    -- def slice(size: Nat) Slice[T]:
    --     __zig_ptr2slice(self, size)


extend Slice[T]
    -- static alloc(size: Nat) Slice[T]:
    --     __zig_alloc(size)

    -- def free:
    --     .__zig_free

    -- def size Nat:
    --     .__zig_slice_size
"""

def print(str: String):
    __zig_print(str)

def panic(str: String) -> Never:
    __zig_panic(str)

struct String
    var bytes: Array[Byte]

    -- def ==(other String) Bool: 
    --     .bytes == other.bytes
    

    -- def drop: 
    --     .bytes.drop

struct Array[T]
    var buffer: Slice[T]
    var size: Nat

    -- def drop: 
    --     .buffer.free

trait Stringable
    def string String

trait Intable
    def int Int

trait Floatable
    def float Float

extend Bool is Stringable

extend Int is Stringable

extend Int is Floatable